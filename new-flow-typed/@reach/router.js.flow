// @flow

export type NavigateFn = (to: string, options?: NavigateOptions<{}>) => void;
declare export var navigate: NavigateFn;

export type HistoryListener = () => void;
export type HistoryUnlistener = () => void;

export interface History {
  location: string;
  transitioning: boolean;
  listen: (listener: HistoryListener) => HistoryUnlistener;
  navigate: NavigateFn;
}

export interface HistorySource {
  location: typeof location;
  addEventListener(name: string, listener: (event: Event) => void): void;
  removeEventListener(name: string, listener: (event: Event) => void): void;

  history: {
    state: any,
    pushState(state: any, title: string, uri: string): void,
    replaceState(state: any, title: string, uri: string): void
  };
}

export interface NavigateOptions<State> {
  state?: State;
  replace?: boolean;
}

type CommonRouteProps = {|
  children?: React$Node,
  location?: typeof location,
  navigate?: NavigateFn,
  uri?: string
|};

export type DefaultRouteProps = {
  ...CommonRouteProps,
  default: boolean
};

export type RouteProps = {
  ...CommonRouteProps,
  path: string
};

export type LocationProviderRenderFn = (context: {|
  location: typeof location,
  navigate: NavigateFn
|}) => React$Node;

declare export class Router extends React$Component<{|
  children?: React$Node,
  basepath?: string,
  primary?: boolean,
  location?: typeof location
|}> {}

declare export class Link<State> extends React$Component<{
  ...$Shape<HTMLAnchorElement>,
  children: React$Node,
  getProps?: (props: {
    isCurrent: boolean,
    isPartiallyCurrent: boolean,
    href: string,
    location: typeof location
  }) => {},
  state?: State,
  to?: string,
  replace?: boolean,
  href?: empty // remove href, as it's ignored by the router
}> {}

declare export class Redirect extends React$Component<{|
  from?: string,
  to: string,
  noThrow?: boolean
|}> {}

declare export class Match<Params> extends React$Component<{|
  path: string,
  children: (props: {|
    match: null | ({ uri: string, path: string } & Params),
    location: typeof location,
    navigate: NavigateFn
  |}) => React$Node
|}> {}

declare export class Location extends React$Component<{|
  children: LocationProviderRenderFn
|}> {}

declare export class LocationProvider extends React$Component<{|
  history: History,
  children?: React$Node | LocationProviderRenderFn
|}> {}

declare export class ServerLocation extends React$Component<{|
  url: string,
  children?: React$Node
|}> {}

declare export function createHistory(source: HistorySource): History;
declare export function createMemorySource(initialPath: string): HistorySource;

declare export function isRedirect(error: any): $Exact<{ uri: string }>;
declare export function redirectTo(uri: string): void;
